1.I created a private cloud [run service](https://cloud.google.com/run/docs/quickstarts/build-and-deploy) using this code:

```
import os

from flask import Flask
from flask import request


app = Flask(__name__)

@app.route('/index', methods=['GET', 'POST'])
def hello_world():
    target = os.environ.get('TARGET', 'World')
    print(target)
    return str(request.data)

if __name__ == "__main__":
    app.run(debug=True,host='0.0.0.0',port=int(os.environ.get('PORT', 8080)))
   
```

2.I created a service account with `--role=roles/run.invoker` that I will associate with the cloud task

     gcloud iam service-accounts create SERVICE-ACCOUNT_NAME \
     --display-name "DISPLAYED-SERVICE-ACCOUNT_NAME"  
     gcloud iam service-accounts list

     gcloud run services add-iam-policy-binding SERVICE \
     --member=serviceAccount:SERVICE-ACCOUNT_NAME@PROJECT-ID.iam.gserviceaccount.com \ 
     --role=roles/run.invoker 

3.I created a queue

    gcloud tasks queues create my-queue


4.I create a test.py 

```
from google.cloud import tasks_v2
from google.protobuf import timestamp_pb2
import datetime

# Create a client.
client = tasks_v2.CloudTasksClient()

# TODO(developer): Uncomment these lines and replace with your values.
project = 'your-project'
queue = 'your-queue'
location = 'europe-west2' # app engine locations
url = 'https://helloworld/index'
payload = 'Hello from the Cloud Task'

# Construct the fully qualified queue name.
parent = client.queue_path(project, location, queue)

# Construct the request body.
task = {
        'http_request': {  # Specify the type of request.
            'http_method': 'POST',
            'url': url,  # The full url path that the task will be sent to.
            'oidc_token': {
                'service_account_email': "your-service-account"
            },
             'headers' : {
             'Content-Type': 'application/json',
           }
        }
}

# Convert "seconds from now" into an rfc3339 datetime string.
d = datetime.datetime.utcnow() + datetime.timedelta(seconds=60)

# Create Timestamp protobuf.
timestamp = timestamp_pb2.Timestamp()
timestamp.FromDatetime(d)

# Add the timestamp to the tasks.
task['schedule_time'] = timestamp
task['name'] = 'projects/your-project/locations/app-engine-loacation/queues/your-queue/tasks/your-task'


converted_payload = payload.encode()

# Add the payload to the request.
task['http_request']['body'] = converted_payload


# Use the client to build and send the task.
response = client.create_task(parent, task)

print('Created task {}'.format(response.name))
#return response

```

5.I run the code in Google Cloud Shell with my user account which has Owner role. 


6.The response received has the form:

```
Created task projects/your-project/locations/app-engine-loacation/queues/your-queue/tasks/your-task
```

7.Check the logs, success


[![enter image description here][1]][1]


  [1]: https://i.stack.imgur.com/tdQle.png
